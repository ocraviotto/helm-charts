# -- Optional list of references to secrets in the same namespace to use for pulling any of the images used.
imagePullSecrets: []

# -- When set, used instead of the name of the chart in the Chart.yaml file
nameOverride: ""
# -- When set, replaces the generated name (a combination of the release name and the chart's)
fullnameOverride: ""

# -- The base domain for the ente installation, used to generate default URLs
baseDomain: "ente.example.com"

museum:
  # -- Number of [museum](https://help.ente.io/self-hosting/museum) instances to run.
  # Since persistence is handled by MinIO and PostgreSQL, this should be(TM) stateless.
  replicaCount: 1

  # -- The upstream image is built once a week.
  # This image is built every time there is a new server deployed at ente.io
  # as detected by [renovate](https://github.com/ocraviotto/container-images/blob/main/renovate.json)
  # and the [GitHub workflow here](https://github.com/ocraviotto/container-images/blob/main/.github/workflows/build-images.yml).
  image:
    # -- My own repository to ensure timely builds
    # [ghcr.io repository](https://github.com/ocraviotto/container-images/pkgs/container/container-images%2Fente-server).
    repository: ocraviotto/container-images/ente-server
    # -- Using GitHub Container Registry, same as the upstream [ente server image](https://github.com/ente-io/ente/pkgs/container/server)
    registry: ghcr.io
    pullPolicy: IfNotPresent
    # -- If empty, it uses the chart appVersion, based on the latest Docker image release in
    # the image [GitHub Packages](https://github.com/ocraviotto/container-images/pkgs/container/container-images%2Fente-server)</br>
    # These tags are generated based on time build and build number + attempt. Read the image metadata to know what hash revision is built from:
    # e.g. `skopeo inspect docker://ghcr.io/ocraviotto/container-images/ente-server:0.0.20250814-1 \| jq '.Labels."org.opencontainers.image.revision"'`</br>
    # For details see: <https://github.com/ocraviotto/container-images/blob/main/specs/ente.yml>
    tag: "0.0.20250823-80.1"
  service:
    type: ClusterIP
    port: 8080
  persistence:
    enabled: false
    size: 1Gi
    # storageClassName: ""
    # existingClaim: ""

  # -- List of names for secrets whose keys will be mounted as environment variables with
  # [envFrom](https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables)
  # If any of the defined secrets does not exist, the pod will fail starting up.
  extraEnvFromSecret: []

  # -- Container level
  # [resource limits and requests](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-requests-and-limits-of-pod-and-container)
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 250m
      memory: 512Mi

  # -- Museum pod level
  # [securityContenxt](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod).
  podSecurityContext:
    fsGroup: 568
    fsGroupChangePolicy: OnRootMismatch
    runAsNonRoot: true
    runAsUser: 568
    runAsGroup: 568
    seccompProfile:
      type: "RuntimeDefault"

  # -- Museum container level
  # [securityContenxt](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container).
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
      add:
      - NET_BIND_SERVICE
    readOnlyRootFilesystem: false

  # -- TLS configuration for the museum pod
  # When enabled, the TLS secret needs to exist and its contents will be mounted under /etc/ente/credentials</br>
  # The secret needs to have these keys defined: tls.cert and tls.key. See the
  # [production deployment readme](https://github.com/ente-io/ente/blob/main/server/scripts/deploy/README.md)
  tls:
    # -- Enable TLS for the museum service
    enabled: false
    # -- Name of the secret containing the TLS certificate and key
    secretName: ""

  # -- Enable Prometheus metrics. For now not fully implemented (missing ServiceMonitor\|PodMonitor)
  metrics:
    enabled: true

  # -- Web Pod [nodeSelector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
  nodeSelector: {}

  # -- Web Pod [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []

  # -- Web Pod [affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity)
  affinity: {}

  # -- Non-sensitive configuration for museum, based on
  # [local.yaml](https://github.com/ente-io/ente/blob/main/server/configurations/local.yaml)
  # and used instead. Will be overwritten by anything in credentials
  # See <https://github.com/ente-io/ente/blob/886ceec05c9db07627afeb560fd29f45b0142d1b/server/pkg/utils/config/config.go#L48-L69>
  # for config loading order.
  config: {}

web:
  replicaCount: 1
  # -- The upstream image is built once a week.
  # This image is built every time there is a new server deployed at ente.io
  # as detected by [renovate](https://github.com/ocraviotto/container-images/blob/main/renovate.json)
  # and the [GitHub workflow here](https://github.com/ocraviotto/container-images/blob/main/.github/workflows/build-images.yml).
  image:
    # -- My own repository to ensure timely builds
    # [ghcr.io repository](https://github.com/ocraviotto/container-images/pkgs/container/container-images%2Fente-web).
    repository: ocraviotto/container-images/ente-web
    # -- Using GitHub Container Registry, same as the upstream [ente server image](https://github.com/ente-io/ente/pkgs/container/web)
    registry: ghcr.io
    pullPolicy: IfNotPresent
    # -- Can be a tag or digest. The image is built every time we trigger a server build, and the source uses ente's main branch.</br>
    # The tags are generated based on time build and build number + attempt. Read the image metadata to know what hash revision is built from:
    # e.g. `skopeo inspect docker://ghcr.io/ocraviotto/container-images/ente-web:0.0.20250814-1 \| jq '.Labels."org.opencontainers.image.revision"'`</br>
    # For details see: <https://github.com/ocraviotto/container-images/blob/main/specs/ente.yml>
    tag: "0.0.20250823-80.1"

  # -- Web [service](https://kubernetes.io/docs/concepts/services-networking/service/) resource configuration
  # exposing only service type and ports to serve
  service:
    # -- Service [Type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
    type: ClusterIP
    # -- The list of ports that are exposed by this service.
    # See the [ServiceSpec](https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec) for details on fields.
    # See [docs for an additional background on service ports and virtual IPs](https://kubernetes.io/docs/reference/networking/virtual-ips/).\n
    # NOTE: If you manually override any of these, make sure that's reflected elsewhere (e.g. .museum.config.enteAlbumsOrigin for public-albums etc.)
    ports:
      - name: photos
        port: 3000
        targetPort: 3000
        # -- Optional override. Defaults to `baseDomain` if empty.
        hostname: ""
      - name: accounts
        port: 3001
        targetPort: 3001
        # -- Optional override. Defaults to `accounts.baseDomain` if empty.
        hostname: ""
      - name: public-albums
        port: 3002
        targetPort: 3002
        # -- Optional override. Defaults to `albums.baseDomain` if empty.
        hostname: ""
      - name: auth
        port: 3003
        targetPort: 3003
        # -- Optional override. Defaults to `auth.baseDomain` if empty.
        hostname: ""
      - name: cast
        port: 3004
        targetPort: 3004
        # -- Optional override. Defaults to `cast.baseDomain` if empty.
        hostname: ""

  # -- Various convenience settings exposed as fields to manage web configuration
  config:
    # -- The value of the 'NODE_ENV' env var
    nodeEnv: production
    # -- The value of the 'ENTE_API_ORIGIN' env var.
    # Leave empty unless you know what you're doing and are willing to see where else this is used...
    # @default <http://api.ente.example.com> -> http(s)://api.[baseDomain]
    enteApiOrigin: ""
    # -- The value of the 'ENTE_ALBUMS_ORIGIN' env var
    # Leave empty unless you know what you're doing and are willing to see where else this is used...
    # @default <http://albums.ente.example.com> -> http(s)://albums.[baseDomain]
    enteAlbumsOrigin: ""

  # -- Container level
  # [resource limits and requests](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-requests-and-limits-of-pod-and-container)
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 250m
      memory: 512Mi

  # -- Web pod level
  # [securityContenxt](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  # used with both web and museum.
  podSecurityContext: {}

  # -- Web container level
  # [securityContenxt](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container).
  securityContext: {}

  # -- Web Pod [nodeSelector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
  nodeSelector: {}

  # -- Web Pod [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []

  # -- Web Pod [affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity)
  affinity: {}

# -- Ingress section with both targets
ingress:
  museum:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: ""  # If empty, will be templated to api.{{ .Values.baseDomain }}
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: museum-tls
    #    hosts:
    #      - api.ente.example.com

  # -- If enabled, hostnames are generated automatically from .Values.web.service.ports and baseDomain
  # e.g. photos.{{ .Values.baseDomain }}
  # So if you need to modify hostnames, you need to set the hostname name under the web.service.ports values
  web:
    enabled: false
    # -- See [ingressClassName](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.33/#ingressspec-v1-networking-k8s-io)
    # If empty if will use the default class. If no ingress operator exists the resource will be created but will have no effect.
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- Default path match used with all hosts
    path: /
    # -- Default pathType for path matching
    pathType: ImplementationSpecific
    # -- [IngressTLS list](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.33/#ingresstls-v1-networking-k8s-io)
    # Required for the web ingress
    tls: []
    #  - secretName: web-tls
    #    hosts:
    #      - photos.{{ .Values.baseDomain }}
    #      - accounts.{{ .Values.baseDomain }}
    #      - ...

# -- Configuration for Ente application (`credentials.yaml`)
# [See the docs](https://help.ente.io/self-hosting/museum) for more details,
# and in particular the example [local.yaml](https://github.com/ente-io/ente/blob/main/server/configurations/local.yaml).
# These will override the default config (in that default `local.yaml`) but will be overridden by `museum.yaml`,
# which we set with values from museum.config.
enteCredentials:
  # -- Optionally (recommended) specify an existing secret containing the `credentials.yaml` key.
  # If set, we will not create a chart secret and you will need to make sure to provide `jwt`, `key`, `db` and `s3`
  # configuration details in your secret, along others (like smpt etc.).
  # The secret must have the configuration under the `credentials.yaml` key.
  # If providing your own secret, you'll need to restart the museum container on secret changes
  # (or use something like <https://github.com/stakater/Reloader>)
  existingSecret: ""
  # -- Set to true to force regeneration of auto-generated secrets on every helm upgrade.
  # We'll otherwise try to fetch the jwt and key material from the existing secret.
  forceKeyRotation: false
  # -- Provide static secrets for key generation. If empty, they will be auto-generated and persisted in the secret.
  key: {}
    # encryption: "your-32-byte-encryption-key"
    # hash: "your-64-byte-hash-key"
  # -- Provide a static secret for JWT. If empty, it will be auto-generated and persisted in the secret.
  jwt: {}
  # secret: "your-jwt-secret"
  # -- s3 configuration for ente. [See the docs](https://help.ente.io/self-hosting/guides/configuring-s3) for details.
  # Here to allow credentials merged into the secret if not providing one.
  s3:
    # -- If true, enable some workarounds to allow us to use a local minio instance
    # by disabling SSL, using path style URLs, not use Cloudflare workers for replication
    # and not specify specify storage classes when uploading objects.
    # Set to false if using SSL for instance and if with MinIO, see `use_path_style_urls` below.
    are_local_buckets: true
    # -- Can override the behavior of `are_local_buckets` by forcing enabling path style.
    # Can also be used without enabling other behaviors of non-prod buckets, like lack of SSL.
    # @default By default this is not used to prevent overriding the use of `are_local_buckets`
    use_path_style_urls: null
    # -- Define your S3 providers here.
    # The `key`, `secret` and `endpoint` will be taken from externalS3 or the minio subchart.
    providers:
      b2-eu-cen:
        region: eu-central-2
        bucket: b2-eu-cen
      wasabi-eu-central-2-v3:
        region: eu-central-2
        bucket: wasabi-eu-central-2-v3
        compliance: false
      scw-eu-fr-v3:
        region: eu-central-2
        bucket: scw-eu-fr-v3

  # -- Configuration for external services if sub-charts are disabled
  # NOTE: These values will be set in a secret and will not be used if `existingSecret` is set
  externalDatabase:
    enabled: false
    host: ""
    port: 5432
    user: ""
    password: ""
    database: ""

  externalS3:
    enabled: false
    endpoint: ""
    region: ""
    accessKey: ""
    secretKey: ""

# -- Pod annotations used with both web and museum
# Can be overwritten with museum.podAnnotations or web.podAnnotations.
podAnnotations: {}

# -- Default pod level
# [securityContenxt](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
# used with both web and museum.
# Can be overwritten by setting museum.podSecurityContext or web.podSecurityContext.
podSecurityContext:
  seccompProfile:
    type: "RuntimeDefault"

# -- Default Container level
# [securityContenxt](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
# used with both web and museum
# Can be overwritten with museum.securityContext or web.securityContext.
# These are more generous than the permissions we default to for the server (museum) and the web applications separately,
# and are here for reference, as they are used if the web or museum versions are not provided.
# Web needs to modify js files on startup does some other changes (nginx docker-entrypoint)
# NET_BIND_SERVICE is required when running with TLS by the museum API
# Both write to the FS outside the mounted points
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
    add:
    - CHOWN
    - DAC_OVERRIDE
    - NET_BIND_SERVICE
    - SETGID
    - SETUID
  readOnlyRootFilesystem: false

# -- Included PostgreSQL configuration
postgresql:
  # -- In "production-like" environments you should modify the values below or better still,
  # run one of Crunchy Postgres Operator (PGO) or CloudNativePG
  enabled: true
  # Values to pass to the postgresql sub-chart.
  # See <https://github.com/bitnami/charts/tree/main/bitnami/postgresql>
  auth:
    database: ente_db
    username: pguser
    password: "changeme"
  primary:
    persistence:
      enabled: true
      size: 8Gi

# -- Included MinIO configuration
minio:
  # -- In "production-like" environments you should modify the mino values if enabled
  # or even better, run MinIO via its own operator.
  enabled: true
  # -- Values to pass to the minio sub-chart.
  # See <https://github.com/bitnami/charts/tree/main/bitnami/minio>
  auth:
    # In production you should consider using an existingSecret or pass these via the cli instead of setting clear values below
    rootUser: changeme
    rootPassword: "changeme1234"
  # -- [MinIO® Persistence parameters](https://github.com/bitnami/charts/tree/main/bitnami/minio#minio-persistence-parameters)
  persistence:
    # -- Enable MinIO® data persistence using PVC. If false, use emptyDir
    enabled: true
    # -- PVC Storage Request for MinIO® data volume
    size: 10Gi

# -- The minio-setup job used to create ente buckets when enabled.
minioSetup:
  enabled: true
  # -- If using an external minio instance, set to the service endpoint
  # @default -- <http://[helm-release]-minio:9000>
  minioUrl: ""
  # -- List of buckets to be created by the minio-setup job, used by ente on
  # If emptied, the job will not be created
  buckets:
    - b2-eu-cen
    - wasabi-eu-central-2-v3
    - scw-eu-fr-v3"

# -- Create a separate serviceAccount for ente museum
# At the moment we
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Autoscaling - not currently implemented
autoscaling:  # not implemented
  museum:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  web:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

# -- A list of extra Kubernetes resources to be deployed with the chart.
# This can be used to deploy resources like ExternalSecrets or other custom resources.
extraResources: []
#  - apiVersion: v1
#    kind: Service
#    metadata:
#      name: my-extra-service
#    spec:
#      ports:
#      - port: 80
#        targetPort: 8080
#      selector:
#        app: my-app
